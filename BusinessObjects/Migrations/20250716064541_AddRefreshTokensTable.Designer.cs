// <auto-generated />
using System;
using System.Collections.Generic;
using BusinessObjects.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250716064541_AddRefreshTokensTable")]
    partial class AddRefreshTokensTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "appointment_status", new[] { "Pending", "Confirmed", "Completed", "Cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "duration_type", new[] { "30Minutes", "60Minutes", "90Minutes", "120Minutes" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "form_status", new[] { "Draft", "Submitted", "Processing", "Completed", "Cancelled" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "law_type", new[] { "RealEstateLaw", "CriminalLaw", "LaborLaw", "EnterpriseLaw" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "payment_status", new[] { "Pending", "Completed", "Failed", "Refunded" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "service_type", new[] { "BookConsultant", "LawForm" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "user_role", new[] { "Customer", "Lawyer", "Admin" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Appointment", b =>
                {
                    b.Property<int>("Appointmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("appointmentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Appointmentid"));

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Lawyerid")
                        .HasColumnType("integer")
                        .HasColumnName("lawyerid");

                    b.Property<string>("Meetinglink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("meetinglink");

                    b.Property<DateOnly>("Scheduledate")
                        .HasColumnType("date")
                        .HasColumnName("scheduledate");

                    b.Property<TimeOnly>("Scheduletime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("scheduletime");

                    b.Property<int?>("Serviceid")
                        .HasColumnType("integer")
                        .HasColumnName("serviceid");

                    b.Property<decimal>("Totalamount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("totalamount")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Appointmentid")
                        .HasName("appointments_pkey");

                    b.HasIndex("Serviceid");

                    b.HasIndex(new[] { "Scheduledate" }, "idx_appointments_date");

                    b.HasIndex(new[] { "Lawyerid" }, "idx_appointments_lawyerid");

                    b.HasIndex(new[] { "Userid" }, "idx_appointments_userid");

                    b.ToTable("appointments", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Customerform", b =>
                {
                    b.Property<int>("Customerformid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customerformid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Customerformid"));

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Formdata")
                        .HasColumnType("jsonb")
                        .HasColumnName("formdata");

                    b.Property<int?>("Lawformid")
                        .HasColumnType("integer")
                        .HasColumnName("lawformid");

                    b.Property<string>("Linkform")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("linkform");

                    b.Property<decimal>("Totalamount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("totalamount")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Customerformid")
                        .HasName("customerforms_pkey");

                    b.HasIndex("Lawformid");

                    b.HasIndex(new[] { "Userid" }, "idx_customerforms_userid");

                    b.ToTable("customerforms", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Duration", b =>
                {
                    b.Property<int>("Durationid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("durationid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Durationid"));

                    b.HasKey("Durationid")
                        .HasName("durations_pkey");

                    b.ToTable("durations", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.Property<int>("Feedbackid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feedbackid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Feedbackid"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Feedbackid")
                        .HasName("feedbacks_pkey");

                    b.HasIndex("Userid");

                    b.ToTable("feedbacks", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawform", b =>
                {
                    b.Property<int>("Lawformid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lawformid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Lawformid"));

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Formpath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("formpath");

                    b.Property<int?>("Lawtypeid")
                        .HasColumnType("integer")
                        .HasColumnName("lawtypeid");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("0.00");

                    b.Property<int?>("Servicestypeid")
                        .HasColumnType("integer")
                        .HasColumnName("servicestypeid");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Lawformid")
                        .HasName("lawform_pkey");

                    b.HasIndex("Lawtypeid");

                    b.HasIndex("Servicestypeid");

                    b.ToTable("lawform", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawtype", b =>
                {
                    b.Property<int>("Lawtypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lawtypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Lawtypeid"));

                    b.HasKey("Lawtypeid")
                        .HasName("lawtypes_pkey");

                    b.ToTable("lawtypes", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawyer", b =>
                {
                    b.Property<int>("Lawyerid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("lawyerid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Lawyerid"));

                    b.Property<decimal?>("Consultationfee")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("consultationfee")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("experience");

                    b.Property<string>("Qualification")
                        .HasColumnType("text")
                        .HasColumnName("qualification");

                    b.Property<decimal?>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("rating")
                        .HasDefaultValueSql("0.00");

                    b.Property<List<string>>("Specialties")
                        .HasColumnType("text[]")
                        .HasColumnName("specialties");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Lawyerid")
                        .HasName("lawyers_pkey");

                    b.HasIndex(new[] { "Rating" }, "idx_lawyers_rating");

                    b.HasIndex(new[] { "Userid" }, "idx_lawyers_userid");

                    b.ToTable("lawyers", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Package", b =>
                {
                    b.Property<int>("Packageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("packageid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Packageid"));

                    b.Property<int?>("Bookingcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("bookingcount");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("Lawformcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("lawformcount");

                    b.Property<string>("Packagename")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("packagename");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("0.00");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Packageid")
                        .HasName("packages_pkey");

                    b.ToTable("packages", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.Property<int>("Paymentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("paymentid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Paymentid"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("Appointmentid")
                        .HasColumnType("integer")
                        .HasColumnName("appointmentid");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Customerformid")
                        .HasColumnType("integer")
                        .HasColumnName("customerformid");

                    b.Property<int?>("Packageid")
                        .HasColumnType("integer")
                        .HasColumnName("packageid");

                    b.Property<DateTime?>("Paymentdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("paymentdate")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Transactionid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("transactionid");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Paymentid")
                        .HasName("payment_pkey");

                    b.HasIndex("Appointmentid");

                    b.HasIndex("Customerformid");

                    b.HasIndex("Packageid");

                    b.HasIndex(new[] { "Transactionid" }, "idx_payment_transactionid");

                    b.HasIndex(new[] { "Userid" }, "idx_payment_userid");

                    b.HasIndex(new[] { "Transactionid" }, "payment_transactionid_key")
                        .IsUnique();

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expirydate");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("isrevoked");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("isused");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("jwtid");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("refreshtokens_pkey");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("refreshtokens", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.Property<int>("Serviceid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("serviceid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Serviceid"));

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Durationid")
                        .HasColumnType("integer")
                        .HasColumnName("durationid");

                    b.Property<int?>("Lawtypeid")
                        .HasColumnType("integer")
                        .HasColumnName("lawtypeid");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price")
                        .HasDefaultValueSql("0.00");

                    b.Property<int?>("Servicestypeid")
                        .HasColumnType("integer")
                        .HasColumnName("servicestypeid");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Serviceid")
                        .HasName("services_pkey");

                    b.HasIndex("Durationid");

                    b.HasIndex("Lawtypeid");

                    b.HasIndex("Servicestypeid");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Servicestype", b =>
                {
                    b.Property<int>("Servicetypeid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("servicetypeid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Servicetypeid"));

                    b.HasKey("Servicetypeid")
                        .HasName("servicestypes_pkey");

                    b.ToTable("servicestypes", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Property<int>("Userid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Userid"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Userid")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "idx_users_email");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Usercredit", b =>
                {
                    b.Property<int>("Usercreditid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("usercreditid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Usercreditid"));

                    b.Property<int?>("Bookingremaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("bookingremaining");

                    b.Property<DateTime?>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Lawformremaining")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("lawformremaining");

                    b.Property<DateTime?>("Updatedat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Userid")
                        .HasColumnType("integer")
                        .HasColumnName("userid");

                    b.HasKey("Usercreditid")
                        .HasName("usercredit_pkey");

                    b.HasIndex(new[] { "Userid" }, "idx_usercredit_userid");

                    b.ToTable("usercredit", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Appointment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Lawyer", "Lawyer")
                        .WithMany("Appointments")
                        .HasForeignKey("Lawyerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("appointments_lawyerid_fkey");

                    b.HasOne("BusinessObjects.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("Serviceid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("appointments_serviceid_fkey");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("appointments_userid_fkey");

                    b.Navigation("Lawyer");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Customerform", b =>
                {
                    b.HasOne("BusinessObjects.Models.Lawform", "Lawform")
                        .WithMany("Customerforms")
                        .HasForeignKey("Lawformid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("customerforms_lawformid_fkey");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Customerforms")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("customerforms_userid_fkey");

                    b.Navigation("Lawform");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Feedback", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("feedbacks_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawform", b =>
                {
                    b.HasOne("BusinessObjects.Models.Lawtype", "Lawtype")
                        .WithMany("Lawforms")
                        .HasForeignKey("Lawtypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lawform_lawtypeid_fkey");

                    b.HasOne("BusinessObjects.Models.Servicestype", "Servicestype")
                        .WithMany("Lawforms")
                        .HasForeignKey("Servicestypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lawform_servicestypeid_fkey");

                    b.Navigation("Lawtype");

                    b.Navigation("Servicestype");
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawyer", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Lawyers")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("lawyers_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Payment", b =>
                {
                    b.HasOne("BusinessObjects.Models.Appointment", "Appointment")
                        .WithMany("Payments")
                        .HasForeignKey("Appointmentid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_appointmentid_fkey");

                    b.HasOne("BusinessObjects.Models.Customerform", "Customerform")
                        .WithMany("Payments")
                        .HasForeignKey("Customerformid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_customerformid_fkey");

                    b.HasOne("BusinessObjects.Models.Package", "Package")
                        .WithMany("Payments")
                        .HasForeignKey("Packageid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("payment_packageid_fkey");

                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("payment_userid_fkey");

                    b.Navigation("Appointment");

                    b.Navigation("Customerform");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.RefreshToken", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("refreshtokens_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.HasOne("BusinessObjects.Models.Duration", "Duration")
                        .WithMany("Services")
                        .HasForeignKey("Durationid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("services_durationid_fkey");

                    b.HasOne("BusinessObjects.Models.Lawtype", "Lawtype")
                        .WithMany("Services")
                        .HasForeignKey("Lawtypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("services_lawtypeid_fkey");

                    b.HasOne("BusinessObjects.Models.Servicestype", "Servicestype")
                        .WithMany("Services")
                        .HasForeignKey("Servicestypeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("services_servicestypeid_fkey");

                    b.Navigation("Duration");

                    b.Navigation("Lawtype");

                    b.Navigation("Servicestype");
                });

            modelBuilder.Entity("BusinessObjects.Models.Usercredit", b =>
                {
                    b.HasOne("BusinessObjects.Models.User", "User")
                        .WithMany("Usercredits")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("usercredit_userid_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObjects.Models.Appointment", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Customerform", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Duration", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawform", b =>
                {
                    b.Navigation("Customerforms");
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawtype", b =>
                {
                    b.Navigation("Lawforms");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObjects.Models.Lawyer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Package", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Service", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BusinessObjects.Models.Servicestype", b =>
                {
                    b.Navigation("Lawforms");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BusinessObjects.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customerforms");

                    b.Navigation("Feedbacks");

                    b.Navigation("Lawyers");

                    b.Navigation("Payments");

                    b.Navigation("Usercredits");
                });
#pragma warning restore 612, 618
        }
    }
}
